1)int	max=0;
		for(int index=1;index<a.length;index=index+2){
			if(a[index]>max){
				max=a[index];
			}
2)if(ip1==13 && ip2!=13 && ip3!=13){
			return ip3;
		}
		if(ip2==13 && ip1!=13 && ip3!=13){
			return ip1;
		}
		if(ip3==13 && ip1!=13 && ip2!=13)	return ip2+ip1;
		if(ip1!=13 && ip2!=13 && ip3!=13) return ip1+ip2+ip3;
		if(ip1==13 && ip2==13 && ip3!=13) return ip3;
		if(ip1!=13 && ip2==13 && ip3==13) return ip1;
		if(ip1==13 && ip2!=13 && ip3==13) return 0;
		if(ip1==13 && ip2==13 && ip3==13) return 0;
		else return 0;

3)List<Integer> n1=new ArrayList<Integer>(l1);
		List<Integer> n2=new ArrayList<Integer>(l2);
		n1.removeAll(l2);
		n2.removeAll(l1);
		n1.addAll(n2);
		int arr[]=new int[n1.size()];
			
		int i=0;
		for(Integer e:n1){
			arr[i++]=e;
		}
		
		return arr;

4) HashMap<String, String> hash = new HashMap<String, String>(m1); 
		float res=0;
		
		for(int i=0;i<s.length;i++){
			
			if(m1.containsKey(s[i])){
				res+=Float.parseFloat(m1.get(s[i]));
			}
		}
				return res;

5)int count=0;
		 HashMap<Integer, String> hash = new HashMap<Integer, String>(m1); 
		 Set<java.util.Map.Entry<Integer, String>> entrySet = hash.entrySet();
	for(java.util.Map.Entry<Integer, String> entry : entrySet){
		if(entry.getKey()%4 !=0){
		count++;
6)int sum=0;
for(int i=0;i<n1.length;i++){
	for(int j=0;j<n2.length;j++){
		if(n1[i]==n2[j]){
			sum+=n1[i];
		}
	}
}
		return sum;
7)int max=0;
		String s4=null;
		for(int i=0;i<s1.length;i++){
			String s2=s1[i];	
			StringTokenizer t=new StringTokenizer(s2,"#");
			String s3=t.nextToken();
			int n1=Integer.parseInt(t.nextToken());
			int n2=Integer.parseInt(t.nextToken());
			int n3=Integer.parseInt(t.nextToken());
			int n=n1+n2+n3;
		
		if(n>=max)
		{
			max=n;
			s4=s3;
		}
		}
		return s4;

8) HashMap<String,Integer> h1=new HashMap<>(m1);
		 HashMap<String,String> h2=new HashMap<>();
		 Set<Entry<String,Integer>> key=h1.entrySet();
		 for(Entry<String,Integer> ent:key){
			 if(ent.getValue()<60){
				 h2.put(ent.getKey(), "FAIL");
			 }
			 else h2.put(ent.getKey(), "PASS");
		 }
		return h2;


17)char [] chars=s1.toCharArray();
		Set<Character> charset =new LinkedHashSet<Character>();
		for(char c:chars){
			charset.add(c);
		}
	StringBuilder sb=new StringBuilder();
	for(Character d:charset){
		sb.append(d);
	}
		return sb.toString();

15)int sum=0;
		for(int k=i;k<=j;k++){
			int num=k;
			for(int l=2;l<=num/2;l++){
				if(num%l==0){
					sum=sum+num;
				}
			}
		}
				return sum;

9)int i=0;String s=Character.toString(ip2);
		StringTokenizer t=new StringTokenizer(ip1, s);
		
		List<String> lt=new ArrayList<String>();
		while(t.hasMoreTokens()){
			StringBuilder sb=new StringBuilder(t.nextToken().toLowerCase());
			lt.add(sb.reverse().toString());
	}
		String a[]=new String[lt.size()];
		for(int i1=0;i1<lt.size();i1++){
			a[i1]=lt.get(i1);
		}
		return a;
		
13) List<Integer> l1=new ArrayList<Integer>();
    for(Integer i:a){
    	if(i!=c){
    		l1.add(i);
    	}
    }
    int arr[]=new int[l1.size()];
    for(int k=0;k<l1.size();k++){
    	arr[k]=l1.get(k);
    }
    return arr;

18)Map<String, String> hash=new HashMap<String, String>();
		for(String s:temp){
			hash.put(s.substring(0,3).toUpperCase(), s);
		}
		
		return hash;
		

15)int sum=0,k=0;
		for(int l=i;l<=j;l++){
			k=0;
			for(int m=1;m<=l;m++){
				if(l%m==0) k++;
			}
			if(k!=2){
				sum=sum+l;
			}
			
		}
				return sum;

16)double k=0;float t=0,z=0;int count=0;
		HashMap<Integer, Float> hash=new HashMap<Integer, Float>(m1);
		
		Set<java.util.Map.Entry<Integer,Float>> s1=hash.entrySet();
		for(java.util.Map.Entry<Integer, Float> e:s1){
			if(e.getKey()%2==0){
				count=count+1;
				 z=z+m1.get(e.getKey());
			}
		}
		t=z/count;
		k=Math.round(t*100)/100.00;
				return (float) k;

19)
	        int sum=0,count=0,t=0;
		Map<Integer, Integer> h1=new HashMap<Integer, Integer>(m1);  
		Set<java.util.Map.Entry<Integer, Integer>> s=h1.entrySet();
		for(java.util.Map.Entry<Integer, Integer> e:s){
			if(e.getKey()%2!=0){
				count=count+1;
				sum=sum+h1.get(e.getKey());
			}
		}
		t=sum/count;
		return t;

20)List<String> lt=new ArrayList<String>();
		Map<String,String> h1=new HashMap<String,String>(m1);
		Set<java.util.Map.Entry<String,String>> s1=h1.entrySet();
		for(java.util.Map.Entry<String,String> e:s1){
			if(e.getValue().equals(s2)){
				lt.add(e.getKey());
			}
		}
		String arr[]=new String[lt.size()];
		for(int i=0;i<lt.size();i++){
			arr[i]=lt.get(i);
			System.out.println(arr);
		}
		return arr;
		
		