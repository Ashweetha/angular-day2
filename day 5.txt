6) Pattern pattern = Pattern.compile("[a-zA-Z0-9]*");
	      Matcher matcher = pattern.matcher(pass);
	  if (matcher.matches()) {

     throw new Exception("Password Too Weak");
	      } 
				
		return "Valid";

7)int count1=0,count2=0;
		for(int i=0;i<pass.length();i++){
			char c=pass.charAt(i);
			if(Character.isDigit(c)){
				count1++;
			}
			if(Character.isUpperCase(c)){
				count2++;
			}
		}
	        if(count1>=1 && count2>=1)   
	          return "Valid";
	        else 
	        	throw new Exception("Password Too Weak");


8)    
		int count1=0,count2=0;
		for(int i=0;i<pass.length();i++){
			char c=pass.charAt(i);
			if(Character.isDigit(c)){
				count1++;
			}
			if(Character.isUpperCase(c)){
				count2++;
			}
		}
	        if(count2==0) 
	        	throw new Exception("Upper Case Not Found");
			
	        if(count1==0) 
	        	throw new Exception("Digit Not Found");
		
	return "Valid";

9) for(int i=0;i<str.length();i++){
			char c=str.charAt(i);
			if(c=='A' || c=='E'|| c=='I' || c=='O' || c=='U' || c=='a' || c=='e' || c=='i' || c=='o' || c=='u' ){
				count++;
			}
		}
		if(count==0){
			throw new Exception("VowelNotFoundException");
		}
		return count;
		

10)
		try
		{
		num=Integer.parseInt(input);
		}
		catch(NumberFormatException e)
		{
			throw new NumberFormatException("String Contains Number");
		}
        
   return num; 	


12)String t=data.substring (2,5);
		char a=t.charAt(0);
		if(a=='v'){
		throw new	java.lang.StringIndexOutOfBoundsException();
		}
		return t;
	     	

13)if(day<0){
			throw new Exception("Negative Day");
		}
		if(day==0){
			throw new Exception("Invalid Day");
		}
		if(day>31){
			throw new Exception("Day Limit Exceeded");
		}
		return "Day is Valid";

16)if(day>31 || month >12 || year>2020){
			throw new Exception("Invalid Date");
		}
		if(year%4==0 && year%100!=0 || year%400==0){
			if(month==2 && day>29){
				throw new Exception("Leap Year Day Error");
			}
		}
		return "Valid Date";

17)for(int i=0;i<array.length;i++){
			
			sum=sum+array[i];}
		for(int i=0;i<array.length;i++){ 
			if(array[i]<0){
				throw new Exception("Array Have Negatives");
			}
			if(array[i]==0){
				throw new Exception("Array Have Zeros");
			}}
		return sum;

19)for(int i=0;i<input.length();i++){
		char c=input.charAt(i);
		if(Character.isDigit(c)){
			throw new Exception("Invalid String");
		}
		
	}String str="";
	for(int i=input.length()-1;i>=0;i--){
		str=str+input.charAt(i);
	}
	if(str.equals(input)){
		return "Pallindrome";
	}
	else	return "Not a Pallindrome";

21)String output=null;
		lname=lname.toUpperCase();
		try{
		output=lname+fname;
		}
		catch(NullPointerException e){
			throw new NullPointerException();
		}
		return output;

22)if(s1.contains("jpeg")){
			return"jpeg";	
			}
		
			
			if(!s1.contains(".")){
				throw new Exception("NotValidFormat");
			}
			else{
				throw new Exception("NotFileExtension");
			}
			